{"version":3,"sources":["Redux/Types.js","Redux/DataReducer.js","api/Buttons.js","Redux/MemoryReducer.js","Redux/RootReducer.js","Redux/Store.js","Components/Output/Output.js","Components/Button/Button.js","Redux/Actions.js","api/Api.js","App.js","index.js"],"names":["GET_CHAR","CLEAR_DATA","SET_OUT","SET_MINUS","CHANGE_SET_MINUS","CLEAR_SCREEN","MEM_CHANGE","MEM_CLEAR","RESULT","initialState","buttons","id","val","color","form","setMinus","out","pit","memory","result","RootReducer","combineReducers","data","state","type","payload","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","Output","props","char","className","Button","onClick","getChar","changeSetMinus","clearScreen","_","memChange","minusChange","arr","slice","concat","memorySet","mem","inc","math","str","rate","reg","match","split","Math","min","length","splice","console","log","arrPercent","mathResult","calc","sign","calcArr","indexOf","tempArr","Number","includes","a","b","App","dispatch","useDispatch","useSelector","charset","arrChar","minusStat","resultState","memGet","join","handleClick","map","item","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfe42427.chunk.js","sourcesContent":["export const GET_CHAR = 'DATA/GET_CHAR';\nexport const CLEAR_DATA = 'DATA/CLEAR_DATA';\nexport const SET_OUT = 'DATA/SET_OUT';\nexport const SET_MINUS = 'DATA/SET_MINUS';\nexport const CHANGE_SET_MINUS = 'DATA/CHANGE_SET_MINUS';\nexport const CLEAR_SCREEN = 'DATA/CLEAR_SCREEN';\nexport const MEM_CHANGE = 'MEMORY/MEM_CHANGE';\nexport const MEM_CLEAR = 'MEMORY/MEM_CLEAR';\nexport const RESULT = 'MEMORY/RESULT';","import {\n    GET_CHAR,\n    CLEAR_DATA,\n    SET_OUT,\n    SET_MINUS,\n    CHANGE_SET_MINUS,\n    CLEAR_SCREEN\n} from './Types';\nimport {buttons} from \"../api/Buttons\";\n\nconst initialState = {\n    buttons,\n    setMinus: false,\n    out: '',\n    pit: [],\n}\n\nexport const DataReducer = ( state = initialState, {type, payload}) => {\n    switch (type) {\n        case GET_CHAR:\n            return {...state, pit: [...state.pit, payload]};\n        case SET_OUT:\n            return {...state, out: payload};\n        case CLEAR_DATA:\n            return initialState;\n        case SET_MINUS:\n            return {...state, pit: payload};\n        case CHANGE_SET_MINUS:\n            return {...state, setMinus: payload};\n        case CLEAR_SCREEN:\n            return {...state, pit: ['']}\n        default:\n            return state\n    }\n}","export const buttons = [\n    {\n        id: 0,\n        val: 'AC',\n        color: 'light',\n        form: 'circle'\n    },\n    {\n        id: 1,\n        val: '+/-',\n        color: 'light',\n        form: 'circle'\n    },\n    {\n        id: 2,\n        val: '%',\n        color: 'light',\n        form: 'circle'\n    },\n    {\n        id: 3,\n        val: '/',\n        color: 'orange',\n        form: 'circle'\n    },\n    {\n        id: 4,\n        val: 'mc',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 5,\n        val: 'mr',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 6,\n        val: 'm-',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 7,\n        val: 'm+',\n        color: 'orange',\n        form: 'circle'\n    },\n    {\n        id: 8,\n        val: '7',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 9,\n        val: '8',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 10,\n        val: '9',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 11,\n        val: '*',\n        color: 'orange',\n        form: 'circle'\n    },\n    {\n        id: 12,\n        val: '4',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 13,\n        val: '5',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 14,\n        val: '6',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 15,\n        val: '-',\n        color: 'orange',\n        form: 'circle'\n    },\n    {\n        id: 16,\n        val: '1',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 17,\n        val: '2',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 18,\n        val: '3',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 19,\n        val: '+',\n        color: 'orange',\n        form: 'circle'\n    },\n    {\n        id: 20,\n        val: '0',\n        color: 'dark',\n        form: 'oval'\n    },\n    {\n        id: 21,\n        val: '.',\n        color: 'dark',\n        form: 'circle'\n    },\n    {\n        id: 22,\n        val: '=',\n        color: 'orange',\n        form: 'circle'\n    }\n]","import {\n    MEM_CHANGE,\n    MEM_CLEAR,\n    RESULT\n} from \"./Types\";\n\nconst initialState = {\n    memory: 0,\n    result: 0\n}\n\nexport const MemoryReducer = (state = initialState, {type, payload}) => {\n    switch(type) {\n        case MEM_CHANGE:\n            return {...state, memory: payload};\n        case MEM_CLEAR:\n            return {...state, memory: 0 };\n        case RESULT:\n            return {...state, result: payload}\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport {DataReducer} from \"./DataReducer\";\nimport {MemoryReducer} from \"./MemoryReducer\";\n\nexport const RootReducer = combineReducers({\n    data: DataReducer,\n    memory: MemoryReducer\n});","import {compose, createStore} from \"redux\";\nimport {RootReducer} from \"./RootReducer\";\n\nconst store = createStore(\n    RootReducer,\n    compose(window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n);\n\nexport default store;","import React from \"react\";\nimport './Out.css';\n\nexport const Output = (props) => {\n    const char = props.data;\n    return (\n        <div className='out'>\n            <span className='text'>{char || '0'} </span>\n        </div>\n    )\n}","import React from \"react\";\nimport './Button.css';\n\nexport const Button = (props) => {\n\n    const className = `space click ${props.data.form} ${props.data.color}`;\n    if(props.data.form === 'oval'){\n        return (\n            <div\n                className={className}\n                onClick={()=> props.getChar(\n                    props.data.val\n                )}\n            >\n                <span className='val'>{props.data.val}</span>\n            </div>\n        )\n    }else {\n        return (\n            <div\n                className={className}\n                onClick={()=> props.getChar(\n                    props.data.val\n                )}\n            >\n                <span className='val'>{props.data.val}</span>\n            </div>\n        )\n    }\n}","import {\n    GET_CHAR,\n    CLEAR_DATA,\n    SET_OUT,\n    SET_MINUS,\n    CHANGE_SET_MINUS,\n    CLEAR_SCREEN,\n    MEM_CHANGE,\n    RESULT,\n    MEM_CLEAR\n} from \"./Types\";\n\nexport const getChar = data => ({\n    type: GET_CHAR,\n    payload: data,\n})\nexport const setOut = data => ({\n    type: SET_OUT,\n    payload: data\n})\nexport const clearData = _ => ({\n    type: CLEAR_DATA,\n})\nexport const setMinus = data => ({\n    type: SET_MINUS,\n    payload: data\n})\nexport const changeSetMinus = data => ({\n    type: CHANGE_SET_MINUS,\n    payload: data\n})\nexport const clearScreen = _ => ({\n    type: CLEAR_SCREEN\n})\nexport const memChange = data => ({\n    type: MEM_CHANGE,\n    payload: data\n})\nexport const result = data => ({\n    type: RESULT,\n    payload: data\n})\nexport const memClear = _ => ({\n    type: MEM_CLEAR\n})","export const minusChange = (arr, val) => { //функция по добавлению и удалению минуса\n    if(!val){\n        const changed = ['-'];\n        return changed.concat(arr);\n    }else {\n        return arr.slice(1);\n    }\n}\nexport const memorySet = (mem, inc, val) => { //функция инкремента и декремента числа в памяти\n    if(val){\n        return mem + inc;\n    } else {\n        return mem - inc;\n    }\n}\n\nexport const math = (str, rate = false) => { // парсер математического уравнения из строки и его расчет\n    const reg = /[+\\-\\\\*/]/g;\n    const val = str.match(reg); //получаю массив операторов\n    const arr = str.split(reg); // получаю массив операндов\n    let result = [];\n\n    while(Math.min(arr.length, val.length)){ //склеиваю массивы операторов и операндов последовательно каждое значение\n        result = result.concat(arr.splice(0,1), val.splice(0,1));\n    }\n\n    arr.length ? result = result.concat(arr) : result = result.concat(val);\n    console.log('start: ' + result);\n\n    //расчет процента\n    let arrPercent = [];\n    if(rate){ //\n        arrPercent = result.splice(-2, 2);\n        console.log('percent ' + arrPercent);\n    }\n    console.log('cut percent: ' + result)\n\n    let mathResult = 0; // хранение промежуточного результата\n\n    const calc = (result, sign) => { // промежуточная калькуляция уравнения\n        const calcArr = result;\n        const val = calcArr.indexOf(sign);\n        const tempArr = calcArr.slice(val-1, val+2);\n        switch(sign) {\n            case '*':\n               mathResult = Number(tempArr[0]) * Number(tempArr[2]);\n               break;\n            case '/':\n                mathResult = Number(tempArr[0]) / Number(tempArr[2]);\n                break;\n            case '+':\n                mathResult = Number(tempArr[0]) + Number(tempArr[2]);\n                break;\n            case '-':\n                mathResult = Number(tempArr[0]) - Number(tempArr[2]);\n                break;\n            default:\n                break;\n        }\n        calcArr.splice(val-1, 3, mathResult);\n        return calcArr;\n    }\n    //поиск в массиве повторных операторов\n    while(result.includes('*')) {\n        calc(result, '*');\n    }\n    while(result.includes('/')) {\n        calc(result, '/');\n    }\n    while(result.includes('+')) {\n        calc(result, '+');\n    }\n    while(result.includes('-')) {\n        calc(result, '-');\n    }\n    console.log(result);\n    if(!rate) {\n        return result;\n    } else {\n        let a = Number(result[0]);\n        let b = Number(arrPercent[1]);\n        switch(arrPercent[0]){\n            case '*':\n                return mathResult = (a/100) * b;\n            case '/':\n                return mathResult = (a*100) / b;\n            case '+':\n                return mathResult = (( a / 100 ) * b ) + a;\n            case '-':\n                return mathResult = a - (( a / 100 ) * b );\n            default:\n                break;\n        }\n    }\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Output} from \"./Components/Output/Output\";\nimport {Button} from \"./Components/Button/Button\";\nimport {\n  getChar,\n  setOut,\n  clearData,\n  setMinus,\n  changeSetMinus,\n  memChange,\n  clearScreen,\n  result,\n  memClear\n} from \"./Redux/Actions\";\nimport {\n  memorySet,\n  minusChange,\n  math\n} from \"./api/Api\";\nimport './App.css';\n\nfunction App() {\n  const dispatch = useDispatch()\n  const buttons = useSelector(state => state.data.buttons) //массив кнопок\n  const charset = useSelector(state => state.data.out) //строка вывода\n  const arrChar = useSelector(state => state.data.pit) //массив всех введенных значений\n  const minusStat = useSelector(state => state.data.setMinus) //состояние флага минус\n  const resultState = useSelector(state => state.memory.result) //результат\n  const memGet = useSelector(state => state.memory.memory) //состояние памяти\n\n  dispatch(setOut(arrChar.join(''))); // преобразую массив в строку и записываю в СТОР (OUT) для вывода результата\n\n  const handleClick = char => { //принимаю символы с клавиатуры калькулятора\n    switch(char) {\n      case 'AC':\n        return dispatch(clearData()) //  обнуляю калькулятор (возвращаю начальный СТОР)\n      case '+/-':\n        if(!minusStat){ //добавляю минус в начало строки либо его удаляю если он есть\n          dispatch(changeSetMinus(!minusStat))\n          return dispatch(setMinus(minusChange(arrChar, minusStat)));\n        }else {\n          dispatch(changeSetMinus(!minusStat))\n          return dispatch(setMinus(minusChange(arrChar, minusStat)));\n        }\n      case '=': // произвожу вычисления по нажатию кнопки\n        dispatch(clearScreen());\n        return dispatch(getChar(math(charset)));\n      case 'm+': // сохраняет значение, при повторном нажатии добавляет к нему текущее значение\n        dispatch(result(math(charset)));\n        return dispatch(memChange(memorySet(resultState, math(charset), true)));\n      case 'm-': // отнимает от сохраненного значения\n        return dispatch(memChange(memorySet(resultState, math(charset), false)));\n      case 'mr': // выводит результат на экран\n        dispatch(clearScreen());\n        return dispatch(getChar(memGet));\n      case 'mc': // очищает память\n        dispatch(clearScreen());\n        return dispatch(memClear())\n      case '%': // считает процент от введенного уравнения\n        dispatch(clearScreen());\n        return dispatch(getChar(math(charset, true)))\n      default:\n        return dispatch(getChar(char)); //записываю в массив в СТОР (PIT)\n    }\n\n  }\n  //генерирую кнопки клавиатуры динамически и передаю каждой кнопке значения и колбэк\n  return (\n    <div className=\"container\">\n      <Output data={charset}/>\n      {buttons.map(item => <Button key={item.id} data={item} getChar={handleClick}/>)}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from \"./Redux/Store\";\nimport App from './App';\n\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n"],"sourceRoot":""}